\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename evil.info
@settitle Evil-mode manual
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@copying
This manual is for Evil (version 1.3.0-snapshot), an extensible vi
layer for Emacs.

Copyright (C) 2011-2019 Eivind Fonn, Frank Fischer and Vegard Øye.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the section entitled “GNU Free
Documentation License.”
@end quotation

The Evil team thanks everyone at gmane.emacs.vim-emulation for their
feedback and contributions.
@end copying

@dircategory Emacs
@direntry
* Evil: (evil).         Extensible vi layer for Emacs.
@end direntry

@finalout
@titlepage
@title Evil-mode manual
@subtitle for version 1.3.0-snapshot
@author Eivind Fonn, Frank Fischer, Vegard Øye
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Evil-mode manual
@end ifnottex

@menu
* Overview::
* Settings::

@detailmenu
--- The Detailed Node Listing ---

Overview

* Installation via package.el: Installation via packageel. 
* Manual installation::
* Modes and states::

Settings

* Wants::
* Search settings::
* Indentation settings::
* Cursor movement settings::
* Cursor display settings::

@end detailmenu
@end menu

@node Overview
@chapter Overview

Evil is an extensible vi layer for Emacs.  It emulates the main
features of Vim,@footnote{Vim is the most popular version of @emph{vi}, a modal text editor
with many implementations. Vim also adds some functions of its own,
like visual selection and text objects.  For more information, see:
@uref{https://vim.org, Vim official website}.} turning Emacs into a modal editor.  Like Emacs
in general, Evil is extensible in Emacs Lisp.

@menu
* Installation via package.el: Installation via packageel. 
* Manual installation::
* Modes and states::
@end menu

@node Installation via packageel
@section Installation via package.el

Evil is available as a package from MELPA stable and MELPA unstable.
To set up @code{package.el} to work with one of these repositories, you can
follow the instructions on @uref{https://melpa.org/#/getting-started, melpa.org}.

Once that is done, you can execute the following commands:

@example
M-x package-refresh-contents
M-x package-install RET evil RET
@end example

@noindent
then choose 'evil' when queried for a package name.  Finally, add the
following lines to your Emacs init file:

@lisp
(require 'evil)
(evil-mode 1)
@end lisp

@node Manual installation
@section Manual installation

First, install @code{undo-tree}, @code{goto-chg} and @code{cl-lib}.  If you have an
Emacs version newer than 24.2, you should already have @code{cl-lib}.

Evil lives in a Git repository.  To download Evil, do

@example
git clone --depth 1 https://github.com/emacs-evil/evil.git
@end example

@noindent
Then add the following lines to your Emacs init file:

@lisp
(add-to-list 'load-path "path/to/evil")
(require 'evil)
(evil-mode 1)
@end lisp

@noindent
Ensure you replace @code{path/to/evil} with the actual path to where you
cloned Evil.

@node Modes and states
@section Modes and states

The next time Emacs is started, it will come up in @emph{normal state},
denoted by @code{<N>} in the mode line.  This is where the main vi bindings
are defined.  Note that you can always disable normal state with
@code{C-z}, which switches to an “Emacs state” (denoted by @code{<E>}) in which
vi keys are completely disabled.  Press @code{C-z} again to switch back to
normal state.

Evil uses the term @emph{state} for what is called a “mode” in vi, since
@emph{mode} already has its own meaning in Emacs.  Evil defines a number of
states, such as normal state (@code{<N>}), insert state (@code{<I>}), visual
state (@code{<V>}), replace state (@code{<R>}), operator-pending state (@code{<O>}),
motion state (@code{<M>}) and Emacs state (@code{<E>}).  Each state has its own
keymaps and customization variables.

@node Settings
@chapter Settings

Evil’s behaviour can be adjusted by setting some variables.  The
current values may be inspected by doing

@example
M-x customize-group RET evil RET
@end example

To change the value of a variable, you can use this interface, or add
a @code{setq} form to your Emacs init file, preferably before Evil is
loaded.@footnote{Strictly speaking, the order only matters if the variable
affects the way Evil is loaded.  This is the case with some variables.}

@lisp
(setq evil-shift-width 8)
;; Load Evil
(require 'evil)
@end lisp

@noindent
Note that if a variable is buffer-local, you should use @code{setq-default}
instead of @code{setq} to change its global value.

@defvar evil-want-fine-undo

If true, a change-based action like @code{cw} may be undone in several
steps.  Otherwise (default), it is undone in one single operation.
@end defvar

@defvar evil-backspace-join-lines

If true (default), backspace in insert state may join lines
together.  Otherwise, this is prevented.
@end defvar

@defvar evil-kbd-macro-suppress-motion-error

This variable controls whether the motions @code{h} and @code{l} trigger
end-of-line or beginning-of-line errors in macros.  If equal to
@code{record}, errors are only suppressed when recording macros, but not
when replaying them.  If equal to @code{replay}, errors are only
suppressed when replaying macros, but not when recording them.  If
equal to @code{t}, errors are always suppressed.  If equal to @code{nil}
(default), errors are never suppressed.
@end defvar

@defvar evil-mode-line-format

Determines the position of the state identifier tag in the mode
line.  If equal to @code{before} or @code{after}, the tag is placed at the
beginning or the end of the mode line, respectively.  If @code{nil},
there is no tag.  Otherwise it may be a cons cell where the @emph{car} is
either @code{before} or @code{after}, and the @emph{cdr} is a symbol already
present in the mode line.  The state identifier tag is then placed
before or after that symbol, respectively.
@end defvar

@menu
* Wants::
* Search settings::
* Indentation settings::
* Cursor movement settings::
* Cursor display settings::
@end menu

@node Wants
@section Wants

@defvar evil-want-C-i-jump

If true (default), then @code{C-i} jumps forward in the jump list.
Otherwise, @code{C-i} inserts a tab character.
@end defvar

@defvar evil-want-C-u-scroll

If true, then @code{C-u} scrolls the buffer, as in vi.  Otherwise
(default), @code{C-u} applies a prefix argument. The binding of @code{C-u}
mirrors Emacs behaviour by default due to the relative ubiquity of
prefix arguments.
@end defvar

@node Search settings
@section Search settings

@defvar evil-regexp-search

If true (default), then @code{/} and @code{?} use regular expressions for
searching.  Otherwise, the search expression is interpreted as plain
text.
@end defvar

@defvar evil-search-wrap

If true (default), then @code{/} and @code{?} wrap the search around the
buffer.  Otherwise, they stop at the buffer boundaries.
@end defvar

@defvar evil-flash-delay

The number of seconds to flash search matches when pressing @code{n} and
@code{N}.
@end defvar

@node Indentation settings
@section Indentation settings

@defvar evil-auto-indent

If true (default), inserted line will be indented when using the
@code{o} and @code{O} operators.  Buffer-local.
@end defvar

@defvar evil-shift-width

The number of columns by which a line is shifted when using the @code{<}
and @code{>} commands.  Buffer-local.
@end defvar

@defvar evil-shift-round

If true (default), lines shifted by @code{<} and @code{>} are rounded to the
nearest multiple of @code{evil-shift-width}.  Otherwise they are always
@emph{shifted} by a multiple of @code{evil-shift-width}.  Buffer-local.
@end defvar

@defvar evil-indent-convert-tabs

If true (default), the @code{=} indendation operator converts between
leading tabs and spaces, according to the value of
@code{indent-tabs-mode}.  Otherwise, tabs and spaces are left alone.
@end defvar

@node Cursor movement settings
@section Cursor movement settings

@defvar evil-repeat-move-cursor

If true (default), repeating commands with @code{.} may move the
cursor.  Otherwise, the original position is preserved.
@end defvar

@defvar evil-move-cursor-back

If true (default), the cursor moves “backwards” when exiting insert
state, so that it ends up on the character to the left.  Otherwise
it remains in place, on the character to the right.
@end defvar

@defvar evil-move-beyond-eol

If true, the cursor is allowed to move one past the last character
of a line, as in Emacs.  Otherwise (default), it cannot move past
the last character.
@end defvar

@defvar evil-cross-lines

If true, certain motions that conventionally operate in a single
line may move to other lines.  Otherwise (default), they are
restricted to the current line.  This applies to @code{h}, @code{l}, @code{f}, @code{F},
@code{t}, @code{T}, and @code{~}.
@end defvar

@defvar evil-respect-visual-line-mode

If true, @code{visual-line-mode} is generally respected when it is on.
In this case, motions such as @code{j} and @code{k} navigate by visual lines
(on the screen) rather than “physical” lines (defined by newline
characters).  Otherwise (default), @code{visual-line-mode} is ignored.
@end defvar

@defvar evil-repeat-find-to-skip-next

If true (default), repeating a @code{t} or @code{T} motion using @code{;} or @code{,}
skips adjacent matches.  Otherwise, you may find that repeated
motions do not move the cursor.
@end defvar

@defvar evil-track-eol

If true (default), vertical motions after @code{$} maintain the cursor at
the end of the line.  This is analogous to @code{track-eol}, but respects
our interpretation of end-of-line.
@end defvar

@node Cursor display settings
@section Cursor display settings

@defvar evil-default-cursor

Specifies the default cursor to use.  This may be either a cursor
type as per the requirements outlined by @code{C-h v cursor-type}, a
color string, a function that sets the cursor, or a list of such.
@end defvar

@bye